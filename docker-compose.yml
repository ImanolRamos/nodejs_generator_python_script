version: '3.8'
services:
  # These are the configurations for our Node app
  # When Docker Compose starts this container it will automatically
  # use the Dockerfile in the directory to configure it
  # backend-berribikes:
  #   build: backend
  #   container_name: backend-berribikes-first
  #   depends_on:
  #     # Our app does not work without our database
  #     # so this ensures our database is loaded first
  #     - postgres
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     # Maps our current project directory `.` to
  #     # our working directory in the container
  #     - ./backend/:/usr/src/app/
  #     # node_modules workaround for volumes
  #     # https://stackoverflow.com/a/32785014
  #     - /usr/src/app/node_modules
  #   env_file:
  #     - backend/.env

  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the 
  # address of this container.
  postgres:
    image: postgres:14.1-alpine
    
    restart: always
    env_file:
      - mrc/.env
    # environment:
    #   # You can set the value of environment variables
    #   # in your docker-compose.yml file
    #   # Our Node app will use these to connect
    #   # to the database
    #   - POSTGRES_USER=root
    #   - POSTGRES_PASSWORD=root
    #   - POSTGRES_DB=root
    ports:
      # Standard port for PostgreSQL databases
      - "5454:5432"
    volumes: 
      - ./database/data:/var/lib/postgresql/data

  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  pgadmin-compose:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "placeholder@example.com"
      PGADMIN_DEFAULT_PASSWORD: "fakepassword123!"
    ports:
      - "5555:80"
    depends_on:
      - postgres